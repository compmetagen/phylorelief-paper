#! /usr/bin/env python

## This code is written by Davide Albanese, <davide.albanese@fmach.it>
## <davide.albanese@gmail.com>
## Copyright (C) 2014 Fondazione Edmund Mach
## Copyright (C) 2014 Davide Albanese

## This program is free so%ftware: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import division
import argparse
import csv
import os
import sys
import subprocess

import numpy as np
import scipy as sp
import pandas as pd
import dendropy
from sklearn.cross_validation import StratifiedShuffleSplit
from sklearn.preprocessing import LabelEncoder

from phylorelief import KCCC_discrete, import_data

metaphyl_path = "path-to-metaphyl-executable"


usage = """%(prog)s otu_table tree sample_data target [options]
"""

description = """MetaPhyl.
"""

epilog = """Example:

    $ ml_metaphyl otu_table.txt tree.tre sample_data.txt Status

Authors:
    Davide Albanese <davide.albanese@fmach.it>
    Claudio Donati <claudio.donati@fmach.it>

Fondazione Edmund Mach, 2014
"""

parser = argparse.ArgumentParser(
    usage=usage, description=description,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=epilog)

parser.add_argument('otu_table',
                    help="an OTU table file (containing the number of "
                    "sequences observed in each OTU for each sample) in "
                    "tab-delimited format")
parser.add_argument('tree',
                    help="a tree in 'newick' format. Note that "
                    "all the leaf nodes should have univocal names")
parser.add_argument('sample_data',
                    help="a tab-delimited file containing sample information "
                    "and metadata")
parser.add_argument('target',
                    help="sample_data column to be used as class label")
parser.add_argument('-o', '--output-file', default="out.txt",
                    help="output file (default %(default)s)")
args = parser.parse_args()


class MetaPhyl:
    def __init__(self, path):
        self.__model = False
        self.__path = path
        self.__data_file = "metaphyl_data.txt"
        self.__tree_file = "metaphyl_tree.tre"
        self.__labels_file = "metaphyl_labels.txt"
        self.__model_file = "metaphyl_model.txt"
        self.__results_file = "metaphyl_results.txt"
        
    def train(self, otutable, tree, target, l, w):
        self.otutable2file(otutable, self.__data_file)
        self.tree2file(tree, self.__tree_file)
        self.target2file(target, self.__labels_file)
        
        cmd = [self.__path, "-train", "-d", self.__data_file, "-t", self.__tree_file,
               "-l", self.__labels_file, "-w", str(w), "-lambda", str(l), "-o",
               self.__model_file]

        proc = subprocess.Popen(cmd, stdout=sys.stdout, stderr=subprocess.PIPE)
        _, out_stderr = proc.communicate()
        if proc.returncode:
            raise Exception(out_stderr)

        self.__model = True

    def test(self, otutable):
        if not self.__model:
            raise ValueError("No model computed")

        self.otutable2file(otutable, self.__data_file)
        cmd = [self.__path, "-test", "-d", self.__data_file, "-c", self.__model_file,
               "-o", self.__results_file]
        proc = subprocess.Popen(cmd, stdout=sys.stdout, stderr=subprocess.PIPE)
        _, out_stderr = proc.communicate()
        if proc.returncode:
            raise Exception(out_stderr)

        return pd.read_csv(self.__results_file, header=None).T.values[0]
        
    @staticmethod
    def otutable2file(otutable, filename):
        c_sample = dict()
        for i, samplename in enumerate(otutable.columns):
            c_sample[samplename] = str(i+1)
        
        otutable = otutable.rename(columns=c_sample)
        otutable.astype(np.int64).T.to_csv(filename, ' ', header=False, index=True)
        
    @staticmethod
    def tree2file(tree, filename):
        tree.write_to_path(filename, 'newick', suppress_rooting=True)

    @staticmethod
    def target2file(target, filename):
        c_sample = dict()
        for i, samplename in enumerate(target.index):
            c_sample[samplename] = str(i+1)
        target = target.rename(c_sample)
        
        c_target = dict()
        for samplename in target.index:
            if not c_target.has_key(target[samplename]):
                c_target[target[samplename]] = []
            c_target[target[samplename]].append(samplename) 
        
        f = open(filename, 'w')
        for t in c_target:
            f.write("> %s\n" % t)
            for samplename in c_target[t]:
                f.write("%s " % samplename)
            f.write("\n")
        f.close()

# nested cross validation loop for parameter tuning
def metaphyl_tune(otu_table, tree, target, mp):

    le = LabelEncoder()
    cv = StratifiedShuffleSplit(target.values, n_iter=10, test_size=0.25,
                                random_state=1)
    lmbds = [10000, 1000, 100, 10, 1, 0.1, 0.01, 0.001, 0.0001]
    weights = [0, 0.2, 0.4, 0.6, 0.8, 1]a
    
    kccc = np.zeros((len(cv), len(lmbds), len(weights)), dtype=np.float)
    for i, (train_index, test_index) in enumerate(cv):

        # train and test data
        otu_table_train = otu_table.iloc[:, train_index]
        otu_table_test = otu_table.iloc[:, test_index]
        target_train = target.iloc[train_index]
        target_test =  target.iloc[test_index]        

        # for each pair of parameters learn the model and test
        for j, l in enumerate(lmbds):
            for k, w in enumerate(weights):
                mp.train(otu_table_train, tree, target_train, l, w)
                y_pred = mp.test(otu_table_test)
                y_true = target_test.values
                kccc[i, j, k] = KCCC_discrete(y_true, y_pred)
            
    kccc_mean = np.mean(kccc, axis=0)
    idx_max = np.unravel_index(kccc_mean.argmax(), kccc_mean.shape)
    l_opt, w_opt = lmbds[idx_max[0]], weights[idx_max[1]]

    return l_opt, w_opt


otu_table, tree, sample_data = import_data(args.otu_table, args.tree, 
                                         args.sample_data)

try:
    target = sample_data[args.target]
except KeyError:
    sys.stderr.write("target %s is not in the sample table")
    exit(1)

# convert taxon labels and target labels for metaphyl
c_otu = dict()
for i, leaf in enumerate(tree.leaf_iter()):
    old_label = leaf.taxon.label
    leaf.taxon.label = str(i)
    c_otu[old_label] = i
le = LabelEncoder()
le.fit(target.values)
target[:] = le.transform(target.values)
target = target + 1

mp = MetaPhyl(metaphyl_path)
cv = StratifiedShuffleSplit(target.values, n_iter=10, test_size=0.25,
                            random_state=1)
kccc = np.empty(len(cv), dtype=np.float)
for i, (train_index, test_index) in enumerate(cv):

    sys.stdout.write('\r')
    sys.stdout.write("%d%%" % int(((i+1)/len(cv))*100))
    sys.stdout.flush()
    
    # train and test data
    otu_table_train = otu_table.iloc[:, train_index]
    otu_table_test = otu_table.iloc[:, test_index]
    target_train = target.iloc[train_index]
    target_test =  target.iloc[test_index]

    # nested cross validation loop for parameter tuning
    l_opt, w_opt = metaphyl_tune(otu_table_train, tree, target_train, mp)

    # learn the model and test
    mp.train(otu_table_train, tree, target_train, l_opt, w_opt)
    y_pred = mp.test(otu_table_test)
    y_true = target_test.values
    kccc[i] = KCCC_discrete(y_true, y_pred)
   
kccc_mean, kccc_sem = sp.mean(kccc, axis=0), sp.stats.sem(kccc)

# write the output file
fout = open(args.output_file, 'w')
fout.write("%.3f\t%.3f\n" % (kccc_mean, kccc_sem))
fout.write('\t'.join(["%.3f" % elem for elem in kccc]) + '\n')
fout.close()
